# Default values for scalar-ledger.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 3

image:
  repository: scalarlabs/scalar-ledger
  tag: 2.0.5
  pullPolicy: IfNotPresent

cassandra:
  user: cassandra
  password: cassandra
  host: cassandra-lb.internal.scalar-labs.com.
  port: 9042

podDisruptionBudget: |
  maxUnavailable: 1

strategy:
  rollingUpdate:
    maxSurge: 0
    maxUnavailable: 1
  type: RollingUpdate

imagePullSecrets:
- name: reg-docker-secrets
nameOverride: ""
fullnameOverride: ""

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  name: scalar-ledger-headless
  type: ClusterIP
  clusterIP: None

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []
# - key: kubernetes.io/app
#   operator: Equal
#   value: scalardl
#   effect: NoSchedule

affinity: {}
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #     - matchExpressions:
  #       - key: agentpool
  #         operator: In
  #         values:
  #         - "scalardl"
  # podAntiAffinity:
  #   preferredDuringSchedulingIgnoredDuringExecution:
  #   - weight: 50
  #     podAffinityTerm:
  #       labelSelector:
  #         matchExpressions:
  #         - key: app
  #           operator: In
  #           values:
  #           - scalar-ledger
  #       topologyKey: kubernetes.io/hostname

initContainer:
  enabled: true
  image:
    repository: cassandra
    tag: latest
    pullPolicy: IfNotPresent
  waitCassandra: 20

files:
  init.cql: |
    CREATE KEYSPACE IF NOT EXISTS scalar WITH replication = {'class': 'NetworkTopologyStrategy', 'dc1': 1 };
    CREATE KEYSPACE IF NOT EXISTS coordinator WITH replication = {'class': 'NetworkTopologyStrategy', 'dc1': 1 };
    ALTER KEYSPACE system_auth WITH replication = {'class': 'NetworkTopologyStrategy', 'dc1': 1 };
    CREATE TABLE IF NOT EXISTS scalar.asset (
        id text,
        age int,
        argument text,
        before_argument text,
        before_contract_id text,
        before_hash blob,
        before_input text,
        before_output text,
        before_prev_hash blob,
        before_signature blob,
        before_tx_committed_at bigint,
        before_tx_id text,
        before_tx_prepared_at bigint,
        before_tx_state int,
        before_tx_version int,
        contract_id text,
        hash blob,
        input text,
        output text,
        prev_hash blob,
        signature blob,
        tx_committed_at bigint,
        tx_id text,
        tx_prepared_at bigint,
        tx_state int,
        tx_version int,
        PRIMARY KEY (id, age)
    ) WITH compaction = { 'class' : 'LeveledCompactionStrategy' };
    CREATE TABLE IF NOT EXISTS scalar.asset_metadata (
        asset_id text,
        latest_age int,
        PRIMARY KEY (asset_id)
    ) WITH compaction = { 'class' : 'LeveledCompactionStrategy' };
    CREATE TABLE IF NOT EXISTS scalar.contract (
        id text,
        cert_holder_id text,
        cert_version int,
        binary_name text,
        properties text,
        registered_at bigint,
        signature blob,
        PRIMARY KEY (cert_holder_id, cert_version, id)
    ) WITH compaction = { 'class' : 'LeveledCompactionStrategy' };
    CREATE INDEX IF NOT EXISTS ON scalar.contract (id);
    CREATE TABLE IF NOT EXISTS scalar.contract_class (
        binary_name text,
        byte_code blob,
        PRIMARY KEY (binary_name)
    );
    CREATE TABLE IF NOT EXISTS scalar.function (
        id text,
        binary_name text,
        byte_code blob,
        registered_at bigint,
        PRIMARY KEY (id)
    ) WITH compaction = { 'class' : 'LeveledCompactionStrategy' };
    CREATE TABLE IF NOT EXISTS scalar.certificate (
        holder_id text,
        version int,
        pem text,
        registered_at bigint,
        PRIMARY KEY (holder_id, version)
    );
    CREATE TABLE IF NOT EXISTS coordinator.state (
        tx_id text,
        tx_state int,
        tx_created_at bigint,
        PRIMARY KEY (tx_id)
    );
