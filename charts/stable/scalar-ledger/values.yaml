# Default values for scalar-ledger.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# replicaCount -- number of replicas to deploy
replicaCount: 1

image:
  # image.repository -- Docker image
  repository: scalarlabs/scalar-ledger
  # image.tag -- Docker image tag, e.g: latest or specific version
  tag: 2.0.5
  # image.pullPolicy -- Specify a imagePullPolicy
  pullPolicy: IfNotPresent

# nameOverride -- String to partially override scalar-envoy.fullname template (will maintain the release name)
nameOverride: ""

# fullnameOverride -- String to fully override scalar-envoy.fullname template
fullnameOverride: ""

cassandra:
  # cassandra.user -- user to use for connection
  user: cassandra
  # cassandra.password -- password to use for connection
  password: cassandra
  # cassandra.host -- host to use for connection
  host: cassandra
  # cassandra.port -- port to use for connection
  port: 9042

# podDisruptionBudget -- podDisruptionBudget Settings
podDisruptionBudget: |
  maxUnavailable: 1

strategy:
  rollingUpdate:
    # strategy.rollingUpdate -- The number of pods that can be created above the desired amount of pods during an update
    maxSurge: 0
    # strategy.rollingUpdate -- The number of pods that can be unavailable during the update process
    maxUnavailable: 1
  # strategy.type -- New pods are added gradually, and old pods are terminated gradually, e.g: Recreate or RollingUpdate
  type: RollingUpdate

# imagePullSecrets -- Optionally specify an array of imagePullSecrets. Secrets must be manually created in the namespace.
imagePullSecrets:
- name: reg-docker-secrets

# podSecurityContext -- PodSecurityContext holds pod-level security attributes and common container settings
podSecurityContext: {}
  # fsGroup: 2000

# securityContext -- Setting security context at the pod applies those settings to all containers in the pod
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # service.name -- svc name need to be know for share with envoy
  name: scalar-ledger-headless
  # service.type -- service types in kubernetes
  type: ClusterIP
  # service.clusterIP -- to make sure it is a headless service
  clusterIP: None

# resources -- resources allowed to the pod
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# nodeSelector -- nodeSelector is form of node selection constraint
nodeSelector: {}

# tolerations -- Tolerations are applied to pods, and allow (but do not require) the pods to schedule onto nodes with matching taints.
tolerations: []
# - key: kubernetes.io/app
#   operator: Equal
#   value: scalardl
#   effect: NoSchedule

# affinity -- the affinity/anti-affinity feature, greatly expands the types of constraints you can express
affinity: {}
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #     - matchExpressions:
  #       - key: agentpool
  #         operator: In
  #         values:
  #         - "scalardl"
  # podAntiAffinity:
  #   preferredDuringSchedulingIgnoredDuringExecution:
  #   - weight: 50
  #     podAffinityTerm:
  #       labelSelector:
  #         matchExpressions:
  #         - key: app
  #           operator: In
  #           values:
  #           - scalar-ledger
  #       topologyKey: kubernetes.io/hostname

initContainer:
  # initContainer.enabled -- to enabled cassandra keyspace creation 
  enabled: true
  image:
    # initContainer.image.repository -- Docker image for initContainer
    repository: cassandra
    # initContainer.image.repository -- Docker image tag, e.g: latest or specific version
    tag: latest
    # image.pullPolicy -- Specify a imagePullPolicy
    pullPolicy: IfNotPresent
  # initContainer.waitCassandra -- number of second before talk to cassandra for keyspace creation
  waitCassandra: 20

files:
  # files.init.cql-- scalar-ledger configuration for cassandra
  init.cql: |
    CREATE KEYSPACE IF NOT EXISTS scalar WITH replication = {'class': 'NetworkTopologyStrategy', 'dc1': 1 };
    CREATE KEYSPACE IF NOT EXISTS coordinator WITH replication = {'class': 'NetworkTopologyStrategy', 'dc1': 1 };
    ALTER KEYSPACE system_auth WITH replication = {'class': 'NetworkTopologyStrategy', 'dc1': 1 };
    CREATE TABLE IF NOT EXISTS scalar.asset (
        id text,
        age int,
        argument text,
        before_argument text,
        before_contract_id text,
        before_hash blob,
        before_input text,
        before_output text,
        before_prev_hash blob,
        before_signature blob,
        before_tx_committed_at bigint,
        before_tx_id text,
        before_tx_prepared_at bigint,
        before_tx_state int,
        before_tx_version int,
        contract_id text,
        hash blob,
        input text,
        output text,
        prev_hash blob,
        signature blob,
        tx_committed_at bigint,
        tx_id text,
        tx_prepared_at bigint,
        tx_state int,
        tx_version int,
        PRIMARY KEY (id, age)
    ) WITH compaction = { 'class' : 'LeveledCompactionStrategy' };
    CREATE TABLE IF NOT EXISTS scalar.asset_metadata (
        asset_id text,
        latest_age int,
        PRIMARY KEY (asset_id)
    ) WITH compaction = { 'class' : 'LeveledCompactionStrategy' };
    CREATE TABLE IF NOT EXISTS scalar.contract (
        id text,
        cert_holder_id text,
        cert_version int,
        binary_name text,
        properties text,
        registered_at bigint,
        signature blob,
        PRIMARY KEY (cert_holder_id, cert_version, id)
    ) WITH compaction = { 'class' : 'LeveledCompactionStrategy' };
    CREATE INDEX IF NOT EXISTS ON scalar.contract (id);
    CREATE TABLE IF NOT EXISTS scalar.contract_class (
        binary_name text,
        byte_code blob,
        PRIMARY KEY (binary_name)
    );
    CREATE TABLE IF NOT EXISTS scalar.function (
        id text,
        binary_name text,
        byte_code blob,
        registered_at bigint,
        PRIMARY KEY (id)
    ) WITH compaction = { 'class' : 'LeveledCompactionStrategy' };
    CREATE TABLE IF NOT EXISTS scalar.certificate (
        holder_id text,
        version int,
        pem text,
        registered_at bigint,
        PRIMARY KEY (holder_id, version)
    );
    CREATE TABLE IF NOT EXISTS coordinator.state (
        tx_id text,
        tx_state int,
        tx_created_at bigint,
        PRIMARY KEY (tx_id)
    );
