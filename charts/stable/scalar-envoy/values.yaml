# Default values for scalar-envoy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# replicaCount -- number of replicas to deploy
replicaCount: 1

image:
  # image.repository -- Docker image
  repository: envoyproxy/envoy
  # image.tag -- Docker image tag, e.g: latest or specific version
  tag: v1.12.2
  # image.pullPolicy -- Specify a imagePullPolicy
  pullPolicy: IfNotPresent

# imagePullSecrets -- Optionally specify an array of imagePullSecrets. Secrets must be manually created in the namespace.
imagePullSecrets: []

# nameOverride -- String to partially override scalar-envoy.fullname template (will maintain the release name)
nameOverride: ""

# fullnameOverride -- String to fully override scalar-envoy.fullname template
fullnameOverride: ""

# podDisruptionBudget -- podDisruptionBudget Settings
podDisruptionBudget: |
  maxUnavailable: 1

strategy:
  rollingUpdate:
    # strategy.rollingUpdate -- The number of pods that can be created above the desired amount of pods during an update
    maxSurge: 0
    # strategy.rollingUpdate -- The number of pods that can be unavailable during the update process
    maxUnavailable: 1
  # strategy.type -- New pods are added gradually, and old pods are terminated gradually, e.g: Recreate or RollingUpdate
  type: RollingUpdate

# podSecurityContext -- PodSecurityContext holds pod-level security attributes and common container settings
podSecurityContext: {}
  # fsGroup: 2000

# securityContext -- Setting security context at the pod applies those settings to all containers in the pod
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # service.type -- service types in kubernetes
  type: ClusterIP
  # service.annotations -- Service annotations, e.g: prometheus, etc.
  annotations: {}
  ports:
    envoy:
      # service.ports.envoy.port -- envoy public port
      port: 50051
      # service.ports.envoy.targetPort -- envoy k8s internal name
      targetPort: envoy
      # service.ports.envoy.protocol -- envoy protocol
      protocol: TCP
    envoy-priv:
      # service.ports.envoy-priv.port -- nvoy public port
      port: 50052
      # service.ports.envoy-priv.targetPort -- envoy k8s internal name
      targetPort: envoy-priv
      # service.ports.envoy-priv.protocol -- envoy protocol
      protocol: TCP

# resources -- resources allowed to the pod
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# nodeSelector -- nodeSelector is form of node selection constraint
nodeSelector: {}

# tolerations -- Tolerations are applied to pods, and allow (but do not require) the pods to schedule onto nodes with matching taints.
tolerations: []

# affinity -- the affinity/anti-affinity feature, greatly expands the types of constraints you can express
affinity: {}

serviceMonitor:
  # serviceMonitor.enabled -- to able prometheus collect
  enabled: false
  # serviceMonitor.interval --
  interval: "15s"
  # serviceMonitor.targetLabels --
  targetLabels: []
  # serviceMonitor.podTargetLabels --
  podTargetLabels: []
  # serviceMonitor.namespace -- prometheus namespace
  namespace: monitoring
  # serviceMonitor.additionalLabels --
  additionalLabels: {}

files:
  # files."envoy.yaml" -- envoy configuration
  envoy.yaml: |-
    admin:
      access_log_path: /dev/stdout
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9901
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 50051
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            config:
              codec_type: auto
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                - name: local_service
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/" }
                    route: { cluster: scalar-ledger }
                  cors:
                    allow_origin_string_match:
                      - safe_regex:
                          google_re2: {}
                          regex: \*
                    allow_methods: GET, PUT, DELETE, POST, OPTIONS
                    allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                    max_age: "1728000"
                    expose_headers: custom-header-1,grpc-status,grpc-message,rpc.status-bin
              http_filters:
              - name: envoy.grpc_web
              - name: envoy.cors
              - name: envoy.router
      - name: listener_1
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 50052
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            config:
              codec_type: auto
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                - name: local_service
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/" }
                    route: { cluster: scalar-ledger-privileged }
                  cors:
                    allow_origin_string_match:
                      - safe_regex:
                          google_re2: {}
                          regex: \*
                    allow_methods: GET, PUT, DELETE, POST, OPTIONS
                    allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                    max_age: "1728000"
                    expose_headers: custom-header-1,grpc-status,grpc-message,rpc.status-bin
              http_filters:
              - name: envoy.grpc_web
              - name: envoy.cors
              - name: envoy.router
      clusters:
      - name: scalar-ledger
        connect_timeout: 0.25s
        type: strict_dns
        lb_policy: round_robin
        hosts:
          socket_address:
            address: scalar-ledger-headless
            port_value: 50051
        health_checks:
          - timeout: 1s
            interval: 5s
            interval_jitter: 1s
            unhealthy_threshold: 3
            healthy_threshold: 3
            grpc_health_check: {}
        http2_protocol_options: {}
        drain_connections_on_host_removal: true
      - name: scalar-ledger-privileged
        connect_timeout: 0.25s
        type: strict_dns
        lb_policy: round_robin
        hosts:
          socket_address:
            address: scalar-ledger-headless
            port_value: 50052
        health_checks:
          - timeout: 1s
            interval: 5s
            interval_jitter: 1s
            unhealthy_threshold: 3
            healthy_threshold: 3
            grpc_health_check: {}
        http2_protocol_options: {}
        drain_connections_on_host_removal: true
